Ext.define('packed-circle-diagram', {    extend: 'Rally.app.App',    componentCls: 'app',    itemId: 'rallyApp',    launch: function() {        var app = this;        var rootSurface = Ext.create( 'Ext.container.Container', {            autoEl: {                tag: 'svg'            },            id: 'rootSurface',            visible: false        });        rootSurface.addCls('root-surface');        rootSurface.on('afterrender',  app._onElementValid, app);        rootSurface.on('resize',  function( item, wasX,wasY,nowX,nowY) { app._onElementResize(rootSurface)});//        this.add({ xtype: 'container', html: 'Test'});        this.add(rootSurface);    },    _onElementResize: function(rootSurface) {        var svg = d3.select('#rootSurface');        this._setSVGSize(svg);    },    _setSVGSize: function(svg) {        svg.attr('width', this.getSize().width);        svg.attr('height',this.getSize().height);},    _onElementValid: function() {        var app = this;        //Create the dataset in this form        // var root = { 'name' : 'flare', 'children': [ { 'name' : 'child1','size': 200 },{ 'name' : 'child2','size': 200 }]};            var root = { 'name' : 'flare', 'children': [ ]};        //Create global instance of the root data store so we can use it for hover-overs etc.         rootStore = Ext.create('Rally.data.wsapi.Store', {            model: 'portfolioitem/initiative',            autoLoad: true,            listeners: {                load: function(store, data, success) {                    _.each(data, function(d) {                        root.children.push({ 'name': d.get('FormattedID'), 'size' : (s = d.get('LeafStoryPlanEstimateTotal'))?s:1, 'record': d});                    });                    app._runSVG(root);                }            },            fetch: true        });        //When ready, call this function        // this._runSVG(root);    },    _runSVG: function(root) {        var svg = d3.select('#rootSurface');        this._setSVGSize(svg);        var margin = 20;        var diameter = Math.min( svg.attr("width"), svg.attr("height"));    //Set maximum size at start        g = svg.append("g").attr("transform", "translate(" + diameter / 2 + "," + diameter / 2 + ")"); //Allocate a grouping to be in the middle        var color = d3.scaleLinear()            .domain([-1, 5])            .range(["hsl(152,80%,80%)", "hsl(228,30%,40%)"])            .interpolate(d3.interpolateHcl);        var pack = d3.pack()            .size([diameter - margin, diameter - margin])            .padding(2);        var arc = d3.arc({            innerRadius: 0,            outerRadius: function(d) { },            startAngle: 0,            endAngle: 100        });          function zoomTo(v) {            var k = diameter / v[2]; view = v;            node.attr("transform", function(d) {                return "translate(" + (d.x - v[0]) * k + "," + (d.y - v[1]) * k + ")";            });            circle.attr("r", function(d) { return d.r * k; });          }          function zoom(d) {            var focus0 = focus; focus = d;            var transition = d3.transition()                .duration(d3.event.altKey ? 7500 : 750)                .tween("zoom", function(d) {                  var i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2 + margin]);                  return function(t) { zoomTo(i(t)); };                });            transition.selectAll("text")              .filter(function(d) { return d.parent === focus || this.style.display === "inline"; })                .style("fill-opacity", function(d) { return d.parent === focus ? 1 : 0; })                .on("start", function(d) { if (d.parent === focus) this.style.display = "inline"; })                .on("end", function(d) { if (d.parent !== focus) this.style.display = "none"; });          };          root = d3.hierarchy(root)              .sum(function(d) { return d.size; })              .sort(function(a, b) { return b.value - a.value; });          var focus = root,              nodes = pack(root).descendants(),              view;          var circle = g.selectAll("circle")            .data(nodes)            .enter().append("circle")            .on("click", function(d) {                if (focus !== d) zoom(d);                d3.event.stopPropagation();                //Now get the children for this artifact and add to the list                debugger;            })              .attr("class", function(d) { return d.parent ? d.children ? "node" : "node node--leaf" : "node node--root"; })              .style("fill", function(d) { return d.children ? color(d.depth) : null; })              .style("display", function(d) { return d.parent === root ? "inline" : "none"; });          var text = g.selectAll("text")            .data(nodes)            .enter().append("text")              .attr("class", "applink")              .style("fill-opacity", function(d) { return d.parent === root ? 1 : 0; })              .style("display", function(d) { return d.parent === root ? "inline" : "none"; })              .text(function(d) { return d.data.name; });        node = g.selectAll("circle,text");  //Create a global for zooming of all things in the picture        circle.attr('id', function(d) {  return "circle-"+  (d.data.record ? d.data.record.get('FormattedID') : "unknown");});;          svg              .style("background", color(-1))              .on("click", function() { zoom(root); });         zoomTo([root.x, root.y, root.r * 2 + margin]);        return false;    }});
